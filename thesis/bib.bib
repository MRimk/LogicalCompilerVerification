
@book{isabelle,
author = {Nipkow, Tobias and Klein, Gerwin},
title = {Concrete Semantics: With Isabelle/HOL},
year = {2014},
isbn = {3319105418},
publisher = {Springer Publishing Company, Incorporated},
abstract = {Part I of this book is a practical introduction to working with the Isabelle proof assistant. It teaches you how to write functional programs and inductive definitions and how to prove properties about them in Isabelles structured proof language. Part II is an introduction to the semantics of imperative languages with an emphasis on applications like compilers and program analysers. The distinguishing feature is that all the mathematics has been formalised in Isabelle and much of it is executable. Part I focusses on the details of proofs in Isabelle; Part II can be read even without familiarity with Isabelles proof language, all proofs are described in detail but informally. The book teaches the reader the art of precise logical reasoning and the practical use of a proof assistant as a surgical tool for formal proofs about computer science artefacts. In this sense it represents a formal approach to computer science, not just semantics. The Isabelle formalisation, including the proofs and accompanying slides, are freely available online, and the book is suitable for graduate students, advanced undergraduate students, and researchers in theoretical computer science and logic.}
}

@inproceedings{mathlib,
author = {The mathlib Community},
title = {The Lean Mathematical Library},
year = {2020},
isbn = {9781450370974},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3372885.3373824},
doi = {10.1145/3372885.3373824},
abstract = {This paper describes mathlib, a community-driven effort to build a unified library of mathematics formalized in the Lean proof assistant. Among proof assistant libraries, it is distinguished by its dependently typed foundations, focus on classical mathematics, extensive hierarchy of structures, use of large- and small-scale automation, and distributed organization. We explain the architecture and design decisions of the library and the social organization that has led to its development.},
booktitle = {Proceedings of the 9th ACM SIGPLAN International Conference on Certified Programs and Proofs},
pages = {367–381},
numpages = {15},
keywords = {mathlib, formal proof, formal library, Lean},
location = {New Orleans, LA, USA},
series = {CPP 2020}
}

@misc{hithchiker,
  title={The Hitchhiker’s Guide to Logical Verification},
  author={Baanen, Anne and Bentkamp, Alexander and Blanchette, Jasmin and H{\"o}lzl, Johannes and Limperg, Jannis},
  year={2020}
}

@misc{theorem_proving_in_lean,
title={Theorem Proving in Lean}, url={https://leanprover.github.io/theorem_proving_in_lean/}, journal={Theorem Proving in Lean - Theorem Proving in Lean 3.23.0 documentation}, author={Avigad, Jeremy and Moura, Leonardo de and Kong, Soonho}, year={2023}, month={Apr}} 


@article{stainless,
      title = {Verified Functional Programming},
      author = {Voirol, Nicolas Charles Yves},
      institution = {IINFCOM},
      publisher = {EPFL},
      address = {Lausanne},
      pages = {229},
      year = {2019},
      url = {http://infoscience.epfl.ch/record/268824},
      doi = {https://doi.org/10.5075/epfl-thesis-9479},
}

@InProceedings{lego,
author="Altenkirch, Thorsten",
editor="Bezem, Marc
and Groote, Jan Friso",
title="A formalization of the strong normalization proof for System F in LEGO",
booktitle="Typed Lambda Calculi and Applications",
year="1993",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="13--28",
isbn="978-3-540-47586-6"
}

@misc{coq_c, url={https://hdl.handle.net/2066/147182}, title={The C standard formalized in Coq}, publisher={[S.l.]: [S.n.]}, author={Krebbers, Robert Jan}, year={2015}, month={Dec}} 

@inproceedings{webasm,
author = {Watt, Conrad},
title = {Mechanising and Verifying the WebAssembly Specification},
year = {2018},
isbn = {9781450355865},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3167082},
doi = {10.1145/3167082},
abstract = {WebAssembly is a new low-level language currently being implemented in all major web browsers. It is designed to become the universal compilation target for the web, obsoleting existing solutions in this area, such as asm.js and Native Client. The WebAssembly working group has incorporated formal techniques into the development of the language, but their efforts so far have focussed on pen and paper formal specification.We present a mechanised Isabelle specification for the WebAssembly language, together with a verified executable interpreter and type checker. Moreover, we present a fully mechanised proof of the soundness of the WebAssembly type system, and detail how our work on this proof has exposed several issues with the official WebAssembly specification, influencing its development. Finally, we give a brief account of our efforts in performing differential fuzzing of our interpreter against industry implementations.},
booktitle = {Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs},
pages = {53–65},
numpages = {13},
keywords = {bytecode, stack machine, soundness, reduction},
location = {Los Angeles, CA, USA},
series = {CPP 2018}
}

@InProceedings{coq_concrete_semantics,
author="Czajka, {\L}ukasz
and Ekici, Burak
and Kaliszyk, Cezary",
editor="Rabe, Florian
and Farmer, William M.
and Passmore, Grant O.
and Youssef, Abdou",
title="Concrete Semantics with Coq and CoqHammer",
booktitle="Intelligent Computer Mathematics",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="53--59",
abstract="The ``Concrete Semantics'' book gives an introduction to imperative programming languages accompanied by an Isabelle/HOL formalization. In this paper we discuss a re-formalization of the book using the Coq proof assistant (version 8.7.2). In order to achieve a similar brevity of the formal text we extensively use CoqHammer, as well as Coq Ltac-level automation. We compare the formalization efficiency, compactness, and the readability of the proof scripts originating from a Coq re-formalization of two chapters from the book.",
isbn="978-3-319-96812-4"
}

@InProceedings{why3,
author="Clochard, Martin
and Filli{\^a}tre, Jean-Christophe
and March{\'e}, Claude
and Paskevich, Andrei",
editor="Giannakopoulou, Dimitra
and Kroening, Daniel",
title="Formalizing Semantics with an Automatic Program Verifier",
booktitle="Verified Software: Theories, Tools and Experiments",
year="2014",
publisher="Springer International Publishing",
address="Cham",
pages="37--51",
abstract="A common belief is that formalizing semantics of programming languages requires the use of a proof assistant providing (1) a specification language with advanced features such as higher-order logic, inductive definitions, type polymorphism, and (2) a corresponding proof environment where higher-order and inductive reasoning can be performed, typically with user interaction.",
isbn="978-3-319-12154-3"
}

@misc{lean_reference, url={https://leanprover.github.io/reference/lean_reference.pdf}, title={The Lean Reference Manual}, author={Avigad, Jeremy and Ebner, Gabriel and Ullrich, Sebastian}, year={2018}, month={Sep}} 